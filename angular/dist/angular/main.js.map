{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/all-pets/all-pets.component.css","webpack:///./src/app/all-pets/all-pets.component.html","webpack:///./src/app/all-pets/all-pets.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/http.service.ts","webpack:///./src/app/new-pet/new-pet.component.css","webpack:///./src/app/new-pet/new-pet.component.html","webpack:///./src/app/new-pet/new-pet.component.ts","webpack:///./src/app/show-pet/show-pet.component.css","webpack:///./src/app/show-pet/show-pet.component.html","webpack:///./src/app/show-pet/show-pet.component.ts","webpack:///./src/app/update-pet/update-pet.component.css","webpack:///./src/app/update-pet/update-pet.component.html","webpack:///./src/app/update-pet/update-pet.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<p>These pets are looking for a home! </p>\\n<table class=\\\"table table-striped text-center\\\">\\n  <thead class=\\\"thead-dark\\\">\\n    <tr>\\n      <th>Name</th>\\n      <th>Type</th>\\n      <th>Actions</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n\\n    <tr *ngFor = \\\"let p of allPets\\\">\\n      <td>{{p.name}}</td>\\n      <td>{{p.type}}</td>\\n      <td>\\n        <button routerLink = '/pets/details/{{p._id}}' class=\\\"btn btn-warning\\\" style=\\\"margin-right: 5px;\\\">Details</button>\\n        <button routerLink = '/pets/edit/{{p._id}}' class=\\\"btn btn-success\\\" style=\\\"margin-right: 5px;\\\">Edit</button>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n<button [routerLink] = \\\"['/pets/new']\\\" class=\\\"btn btn-outline-info float-right\\\">Add pet to shelter</button>\"","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from '../http.service'; // dependency injection\n\n\n@Component({\n  selector: 'app-all-pets',\n  templateUrl: './all-pets.component.html',\n  styleUrls: ['./all-pets.component.css']\n})\nexport class AllPetsComponent implements OnInit {\n  allPets:any;\n  constructor(private _httpService: HttpService,\n    //these 2 lines are for the routes\n    ){}\n\n  ngOnInit() {\n    this.showAll();\n  }\n  showAll(){\n    let observable = this._httpService.showPets();\n    observable.subscribe(data => {\n      console.log(data);\n      this.allPets = data['pets'];\n    })\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ShowPetComponent } from './show-pet/show-pet.component';\nimport { AllPetsComponent } from './all-pets/all-pets.component';\nimport { UpdatePetComponent } from './update-pet/update-pet.component';\nimport { NewPetComponent } from './new-pet/new-pet.component';\n\nconst routes: Routes = [\n  {path: 'pets/new', component: NewPetComponent},\n  {path: 'pets/edit/:id', component: UpdatePetComponent},\n  {path: 'pets', component: AllPetsComponent},\n  {path: 'pets/details/:id', component: ShowPetComponent},\n  {path: '', pathMatch: 'full', redirectTo: '/pets'}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h1>Pet Shelter</h1>\\n  <router-outlet></router-outlet>\\n</div>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpService } from './http.service'; //register service\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AllPetsComponent } from './all-pets/all-pets.component';\nimport { NewPetComponent } from './new-pet/new-pet.component';\nimport { ShowPetComponent } from './show-pet/show-pet.component';\nimport { UpdatePetComponent } from './update-pet/update-pet.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AllPetsComponent,\n    NewPetComponent,\n    ShowPetComponent,\n    UpdatePetComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule, //to fetch the data???\n    FormsModule, AppRoutingModule // <-- register FormsModule with our app.\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'; //Dependency injection\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  constructor(private _http: HttpClient) { }  //Dependency injection\n\n  showPets(){\n    return this._http.get('/basic');\n  }\n\n  addPet(newPet){\n    return this._http.post('/basic', newPet);\n  }\n  \n  showOne(id){\n    return this._http.get('/basic/' + id);\n  }\n\n  \n  deleteOnePet(id:string){\n    return this._http.delete('/basic/' + id);\n  }\n  \n  likePet(id, pet){\n    return this._http.put('/basic/like/' + id, pet);\n  }\n  \n  updatePet(id, updatePet){\n    return this._http.put('/basic/edit/' + id, updatePet);\n  }\n}","module.exports = \"\"","module.exports = \"<form (submit)=\\\"addOnePet()\\\" class=\\\"bg-light  mx-auto border border-info\\\" style=\\\"height: 780px;\\\">\\n\\n  <p style=\\\"margin: 75px 0 0 125px\\\">Know of a pet needing a home? </p>\\n\\n    <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n        <label for=\\\"newPet.name\\\">Pet Name</label>\\n        <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"newPet.name\\\" placeholder=\\\"Name..\\\" required minlength=\\\"3\\\"  [(ngModel)] = \\\"newPet.name\\\" #name=\\\"ngModel\\\">\\n    </div>\\n\\n    <div *ngIf = \\\"err\\\" class=\\\"alert alert-danger\\\">{{err}}</div>\\n    <div *ngIf=\\\"name.invalid && (name.dirty || !name.untouched)\\\"\\n        class=\\\"alert alert-danger\\\">\\n        <div *ngIf=\\\"name.errors.required\\\">\\n        Pet Name is required.\\n        </div>\\n        <div *ngIf=\\\"name.errors.minlength\\\">\\n        Name must be at least 3 characters long.\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n        <label for=\\\"newPet.type\\\">Pet Type</label>\\n        <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"newPet.type\\\" placeholder=\\\"Type..\\\" required minlength=\\\"3\\\"  [(ngModel)] = \\\"newPet.type\\\" #type=\\\"ngModel\\\">\\n    </div>\\n\\n    <div *ngIf=\\\"type.invalid && (type.dirty || !type.untouched)\\\"\\n        class=\\\"alert alert-danger\\\">\\n        <div *ngIf=\\\"type.errors.required\\\">\\n        Type is required.\\n        </div>\\n        <div *ngIf=\\\"type.errors.minlength\\\">\\n        Type must be at least 3 characters long.\\n        </div>\\n    </div>\\n\\n\\n    <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n        <label for=\\\"newPet.description\\\">Description</label>\\n        <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"newPet.description\\\" placeholder=\\\"Description..\\\" required minlength=\\\"3\\\"  [(ngModel)] = \\\"newPet.description\\\" #description=\\\"ngModel\\\">\\n    </div>\\n\\n    <div *ngIf=\\\"description.invalid && (description.dirty || !description.untouched)\\\"\\n        class=\\\"alert alert-danger\\\">\\n        <div *ngIf=\\\"description.errors.required\\\">\\n            Description is required.\\n        </div>\\n        <div *ngIf=\\\"description.errors.minlength\\\">\\n            Description must be at least 3 characters long.\\n        </div>\\n    </div>\\n\\n\\n    <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n        <label for=\\\"skill1\\\">Skill 1: </label>\\n        <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"skill1\\\" placeholder=\\\"Skill..\\\" [(ngModel)] = \\\"skill1\\\">\\n    </div>\\n    <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n        <label for=\\\"skill2\\\">Skill 2: </label>\\n        <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"skill2\\\" placeholder=\\\"Skill..\\\" [(ngModel)] = \\\"skill2\\\">\\n    </div>\\n    <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n        <label for=\\\"skill3\\\">Skill 3: </label>\\n        <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"skill3\\\" placeholder=\\\"Skill..\\\" [(ngModel)] = \\\"skill3\\\">\\n    </div>\\n\\n\\n    <input type=\\\"submit\\\" value=\\\"Add\\\" class=\\\"btn btn-success float-right\\\" [disabled]=\\\"!name.valid || !type.valid || !description.valid\\\">\\n    <button [routerLink] = \\\"['/pets']\\\" class=\\\"btn btn-primary float-right\\\" >Cancel</button>\\n</form>\\n\\n\\n\\n    \\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from '../http.service'; // dependency injection\nimport { ActivatedRoute, Params, Router } from '@angular/router'; //for the routes\n\n@Component({\n  selector: 'app-new-pet',\n  templateUrl: './new-pet.component.html',\n  styleUrls: ['./new-pet.component.css']\n})\nexport class NewPetComponent implements OnInit {\n  newPet = {name: \"\", type: \"\", description: \"\", skills: []};\n  skill1: string;\n  skill2: string;\n  skill3: string;\n  err;\n\n  constructor(private _httpService: HttpService,\n    //these 2 lines are for the routes\n    private _route: ActivatedRoute,\n    private _router: Router\n    ){}\n\n  ngOnInit() {\n    this.newPet = {name: \"\", type: \"\", description: \"\", skills: []};\n  }\n  addOnePet(){\n    this.newPet.skills.push(this.skill1, this.skill2, this.skill3);\n    let observable = this._httpService.addPet(this.newPet);\n    observable.subscribe(data => {\n      if(!data['err']){\n      console.log(this.newPet.skills);\n      console.log(data);\n      this.newPet = {name: \"\", type: \"\", description: \"\", skills: []};\n      this._router.navigate(['/pets'])\n      } else{\n        this.err = data['err'].errors.name.message;\n        this._router.navigate(['/pets/new']);\n      }\n    })\n  }\n}\n","module.exports = \"\"","module.exports = \"<div *ngIf = \\\"pet\\\">\\n  \\n\\n  <p class=\\\"font-weight-bold\\\"> Details about {{pet.name}}</p>\\n  <p><span class=\\\"font-weight-bold\\\">Type:</span>  {{pet.type}}</p>\\n  <p><span class=\\\"font-weight-bold\\\">Description: </span>{{pet.description}}</p>\\n  <p class=\\\"font-weight-bold\\\">Skills: </p>\\n    <p>{{pet.skills[0]}}</p>\\n    <p>{{pet.skills[1]}}</p>\\n    <p>{{pet.skills[2]}}</p>\\n\\n  <p><span class=\\\"font-weight-bold\\\">Likes:</span> {{pet.likes}}</p>\\n\\n  <button (click)=\\\"like()\\\" class=\\\"btn btn-danger\\\" onclick=\\\"this.disabled=true\\\" style=\\\"margin-right: 5px;\\\">Like this pet</button>\\n  <button (click)=\\\"delete()\\\" class=\\\"btn btn-warning\\\" style=\\\"margin-right: 5px;\\\">Adop this pet</button>\\n  <button [routerLink]=\\\"['/pets']\\\" class=\\\"btn btn-info\\\">Home</button>\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from '../http.service'; // dependency injection\nimport { ActivatedRoute, Params, Router } from '@angular/router'; //for the routes\n@Component({\n  selector: 'app-show-pet',\n  templateUrl: './show-pet.component.html',\n  styleUrls: ['./show-pet.component.css']\n})\nexport class ShowPetComponent implements OnInit {\n  petId: string;\n  pet: any;\n  constructor(private _httpService: HttpService,\n    //these 2 lines are for the routes\n    private _route: ActivatedRoute,\n    private _router: Router\n    ){}\n\n    ngOnInit() {\n      this._route.params.subscribe((params: Params) => {\n      this.petId = params['id'];\n    })\n    this.showPet(this.petId);\n  }\n  \n  showPet(id){\n    let observable = this._httpService.showOne(this.petId);\n    observable.subscribe(data => {\n      this.pet = data['pet'];\n      console.log(this.pet)\n    })\n  }\n\n  delete(){\n    console.log(this.petId);\n    let observable = this._httpService.deleteOnePet(this.petId);\n    observable.subscribe(data => {\n      console.log(data);\n      this._router.navigate(['/pets']);\n    })\n  }\n\n  like(){\n    console.log(this.petId);\n    this.pet.likes ++;\n    let observable = this._httpService.likePet(this.petId, this.pet);\n    observable.subscribe(data => {\n      console.log(data);\n    })\n  }\n}\n","module.exports = \"\"","module.exports = \"<div *ngIf=\\\"updatePet\\\">\\n<form (submit)=\\\"updateOnePet()\\\" class=\\\"bg-light  mx-auto border border-info\\\" style=\\\"height: 780px;\\\">\\n  <p style=\\\"margin: 75px 0 0 125px\\\">Edit this pet </p>\\n  <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n      <label for=\\\"updatePet.name\\\">Pet Name</label>\\n      <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"updatePet.name\\\" placeholder=\\\"Name..\\\" required minlength=\\\"3\\\"  [(ngModel)] = \\\"updatePet.name\\\" #name=\\\"ngModel\\\">\\n  </div>\\n  <div *ngIf = \\\"err\\\" class=\\\"alert alert-danger\\\">{{err}}</div>\\n  <div *ngIf=\\\"name.invalid && (name.dirty || !name.untouched)\\\"\\n    class=\\\"alert alert-danger\\\">\\n      <div *ngIf=\\\"name.errors.required\\\">\\n      Pet Name is required.\\n      </div>\\n      <div *ngIf=\\\"name.errors.minlength\\\">\\n      Name must be at least 3 characters long.\\n      </div>\\n  </div>\\n\\n  <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n      <label for=\\\"updatePet.type\\\">Pet Type</label>\\n      <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"updatePet.type\\\" placeholder=\\\"Type..\\\" required minlength=\\\"3\\\"  [(ngModel)] = \\\"updatePet.type\\\" #type=\\\"ngModel\\\">\\n  </div>\\n\\n  <div *ngIf=\\\"type.invalid && (type.dirty || !type.untouched)\\\"\\n    class=\\\"alert alert-danger\\\">\\n      <div *ngIf=\\\"type.errors.required\\\">\\n      Type is required.\\n      </div>\\n      <div *ngIf=\\\"type.errors.minlength\\\">\\n      Type must be at least 3 characters long.\\n      </div>\\n  </div>\\n\\n\\n  <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n      <label for=\\\"updatePet.description\\\">Description</label>\\n      <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"updatePet.description\\\" placeholder=\\\"Description..\\\" required minlength=\\\"3\\\"  [(ngModel)] = \\\"updatePet.description\\\" #description=\\\"ngModel\\\">\\n  </div>\\n\\n  <div *ngIf=\\\"description.invalid && (description.dirty || !description.untouched)\\\"\\n  class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"description.errors.required\\\">\\n        Description is required.\\n    </div>\\n    <div *ngIf=\\\"description.errors.minlength\\\">\\n        Description must be at least 3 characters long.\\n    </div>\\n  </div>\\n\\n\\n  <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n      <label for=\\\"skill1\\\">Skill 1: </label>\\n      <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"skill1\\\" placeholder=\\\"Skill..\\\" [(ngModel)] = \\\"skill1\\\">\\n  </div>\\n  <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n      <label for=\\\"skill2\\\">Skill 2: </label>\\n      <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"skill2\\\" placeholder=\\\"Skill..\\\" [(ngModel)] = \\\"skill2\\\">\\n  </div>\\n  <div class=\\\"form-group col-8 ml-50\\\" style=\\\"margin: auto; margin-top: 25px;\\\">\\n      <label for=\\\"skill3\\\">Skill 3: </label>\\n      <input type=\\\"text\\\" class = \\\"form-control\\\" name=\\\"skill3\\\" placeholder=\\\"Skill..\\\" [(ngModel)] = \\\"skill3\\\">\\n  </div>\\n\\n\\n  <input type=\\\"submit\\\" value=\\\"Edit\\\" class=\\\"btn btn-success float-right\\\" [disabled]=\\\"!name.valid || !type.valid || !description.valid\\\">\\n  <button routerLink = '/pets/details/{{petId}}' class=\\\"btn btn-primary float-right\\\" >Cancel</button>\\n</form>\\n\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from '../http.service'; // dependency injection\nimport { ActivatedRoute, Params, Router } from '@angular/router'; //for the routes\n\n@Component({\n  selector: 'app-update-pet',\n  templateUrl: './update-pet.component.html',\n  styleUrls: ['./update-pet.component.css']\n})\nexport class UpdatePetComponent implements OnInit {\n  updatePet: any;\n  petId: string;\n  skill1;\n  skill2;\n  skill3;\n  err;\n  constructor(private _httpService: HttpService,\n    //these 2 lines are for the routes\n    private _route: ActivatedRoute,\n    private _router: Router\n    ){}\n\n  ngOnInit() {\n      this._route.params.subscribe((params: Params) => {\n      this.petId = params['id'];\n      this.showPet(this.petId);\n    })\n    // this.updatePet = {name: \"\", type: \"\", description: \"\", skills: []};\n}\n\n  showPet(id){\n    let observable = this._httpService.showOne(this.petId);\n    observable.subscribe(data => {\n      this.updatePet = data['pet'];\n      this.skill1 = this.updatePet.skills[0];\n      this.skill2 = this.updatePet.skills[1];\n      this.skill3 = this.updatePet.skills[2];\n    })\n  }\n\n  updateOnePet(){\n    this.updatePet.skills[0] = this.skill1;\n    this.updatePet.skills[1] = this.skill2;\n    this.updatePet.skills[2] = this.skill3;\n    let observable = this._httpService.updatePet(this.petId, this.updatePet);\n    observable.subscribe(data => {\n      if(!data['err']){\n        this._router.navigate(['/pets/details/' + this.petId])\n      } else {\n        this.err = data['err'].errors.name.message;\n        this._router.navigate(['/pets/edit/' + this.petId])\n      }\n    })\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}